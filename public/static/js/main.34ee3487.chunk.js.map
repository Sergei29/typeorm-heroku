{"version":3,"sources":["logo.svg","accessToken.ts","generated/graphql.tsx","App.tsx","index.tsx"],"names":["module","exports","accessToken","PostsDocument","gql","App","baseOptions","ApolloReactHooks","data","loading","error","className","src","logo","alt","href","target","rel","posts","map","post","subject","content","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","then","setContext","headers","authorization","subscribe","next","bind","complete","catch","unsubscribe","client","ApolloClient","link","from","onError","graphQLErrors","networkError","console","log","HttpLink","uri","credentials","ReactDOM","render","document","getElementById"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,4ICAvCC,EAAc,G,kYC6DX,IAAMC,EAAgBC,IAAH,KAiCKA,IAAH,KCzFrB,IAAMC,EAAM,WAAO,IDgFIC,EChFL,EDiFVC,IAA2DJ,EAAeG,GC/EhFE,EAFgB,EAEhBA,KAFgB,EAEVC,QAFU,EAEDC,MAEtB,OAAKF,EAKH,yBAAKG,UAAU,OAGb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,6CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,4BAEET,EAAKU,MAAMC,KAAI,SAAAC,GACb,OACE,4BACGA,EAAKC,QADR,KACmBD,EAAKE,eAzB3B,4C,8CCCLC,EAAQ,IAAIC,IAAc,IAE1BC,EAAc,IAAIC,KACtB,SAACC,EAAWC,GAAZ,OACE,IAAIC,KAAW,SAAAC,GACb,IAAIC,EAqBJ,OApBAC,QAAQC,QAAQN,GACbO,MAAK,SAAAP,GACJ,IAAMzB,EHZPA,EGaKA,GACFyB,EAAUQ,WAAW,CACnBC,QAAS,CACPC,cAAc,UAAD,OAAYnC,SAKhCgC,MAAK,WACJH,EAASH,EAAQD,GAAWW,UAAU,CACpCC,KAAMT,EAASS,KAAKC,KAAKV,GACzBpB,MAAOoB,EAASpB,MAAM8B,KAAKV,GAC3BW,SAAUX,EAASW,SAASD,KAAKV,QAGpCY,MAAMZ,EAASpB,MAAM8B,KAAKV,IAEtB,WACDC,GAAQA,EAAOY,qBAKrBC,EAAS,IAAIC,IAAa,CAC9BC,KAAMpB,IAAWqB,KAAK,CACpBC,aAAQ,YAAsC,IAAnCC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACxBC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,MAEdzB,EACA,IAAI4B,IAAS,CACXC,IAAK,WACLC,YAAa,cAGjBhC,UAGFiC,IAASC,OACP,kBAAC,IAAD,CAAgBb,OAAQA,GACtB,kBAAC,EAAD,OAEFc,SAASC,eAAe,W","file":"static/js/main.34ee3487.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n  accessToken = s;\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n  return accessToken;\r\n};\r\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  hello: Scalars['String'];\n  posts: Array<Post>;\n};\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['Int'];\n  subject: Scalars['String'];\n  content: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addPost: Scalars['Boolean'];\n};\n\n\nexport type MutationAddPostArgs = {\n  content: Scalars['String'];\n  subject: Scalars['String'];\n};\n\nexport type PostsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PostsQuery = (\n  { __typename?: 'Query' }\n  & { posts: Array<(\n    { __typename?: 'Post' }\n    & Pick<Post, 'subject' | 'content'>\n  )> }\n);\n\nexport type AddPostMutationVariables = Exact<{\n  subject: Scalars['String'];\n  content: Scalars['String'];\n}>;\n\n\nexport type AddPostMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addPost'>\n);\n\n\nexport const PostsDocument = gql`\n    query Posts {\n  posts {\n    subject\n    content\n  }\n}\n    `;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        return ApolloReactHooks.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n      }\nexport function usePostsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = ApolloReactCommon.QueryResult<PostsQuery, PostsQueryVariables>;\nexport const AddPostDocument = gql`\n    mutation AddPost($subject: String!, $content: String!) {\n  addPost(subject: $subject, content: $content)\n}\n    `;\nexport type AddPostMutationFn = ApolloReactCommon.MutationFunction<AddPostMutation, AddPostMutationVariables>;\n\n/**\n * __useAddPostMutation__\n *\n * To run a mutation, you first call `useAddPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPostMutation, { data, loading, error }] = useAddPostMutation({\n *   variables: {\n *      subject: // value for 'subject'\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useAddPostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddPostMutation, AddPostMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddPostMutation, AddPostMutationVariables>(AddPostDocument, baseOptions);\n      }\nexport type AddPostMutationHookResult = ReturnType<typeof useAddPostMutation>;\nexport type AddPostMutationResult = ApolloReactCommon.MutationResult<AddPostMutation>;\nexport type AddPostMutationOptions = ApolloReactCommon.BaseMutationOptions<AddPostMutation, AddPostMutationVariables>;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { usePostsQuery } from './generated/graphql';\n\nexport const App = () => {\n\n  const {data, loading, error }= usePostsQuery();\n\n  if (!data) {\n    return <div>loading...</div>;\n  }\n  \n  return (\n    <div className=\"App\">\n\n      \n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <ul>\n        {\n          data.posts.map(post => {\n            return (\n              <li>\n                {post.subject}, {post.content}\n              </li>\n            );\n          })\n        }\n      </ul>\n      </header>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { App } from \"./App\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink, Observable } from \"apollo-link\";\n\nconst cache = new InMemoryCache({});\n\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable(observer => {\n      let handle: any;\n      Promise.resolve(operation)\n        .then(operation => {\n          const accessToken = getAccessToken();\n          if (accessToken) {\n            operation.setContext({\n              headers: {\n                authorization: `bearer ${accessToken}`\n              }\n            });\n          }\n        })\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      console.log(graphQLErrors);\n      console.log(networkError);\n    }),\n    requestLink,\n    new HttpLink({\n      uri: \"/graphql\",\n      credentials: \"include\"\n    })\n  ]),\n  cache\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}